version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: appointment-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appointment_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appointment-network
      
  # Kafka and Zookeeper for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: appointment-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - appointment-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: appointment-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - appointment-network

  # Frontend for development
  frontend-dev:
    image: node:18-alpine
    container_name: appointment-frontend-dev
    working_dir: /app
    volumes:
      - ./frontend-vite:/app
    ports:
      - "5173:5173"
    command: sh -c "cd /app && npm install && npm run dev -- --host 0.0.0.0"
    networks:
      - appointment-network

# Define networks and volumes
networks:
  appointment-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

  # Service Registry (Eureka)
  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    container_name: appointment-service-registry
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - appointment-network

  

  # React Frontend
  frontend:
    build:
      context: ./frontend-vite
      dockerfile: Dockerfile
    container_name: appointment-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
    depends_on:
      - api-gateway
    networks:
      - appointment-network



  # Appointment Service
  appointment-service:
    build:
      context: ./Appointment-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/appointment_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

# Define networks and volumes
networks:
  appointment-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy