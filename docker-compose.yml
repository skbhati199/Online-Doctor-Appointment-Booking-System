services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: appointment-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appointment_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - appointment-network
      
  # Kafka and Zookeeper for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: appointment-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - appointment-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: appointment-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - appointment-network

  # Frontend for development
  frontend-prod:
    image: nginx:alpine
    container_name: appointment-frontend-prod
    volumes:
      - ./frontend-vite/dist:/usr/share/nginx/html
    ports:
      - "80:80"
    networks:
      - appointment-network
  
  # API Gateway (Using Nginx as a simple reverse proxy)
  api-gateway:
    image: nginx:alpine
    container_name: appointment-api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - appointment-network

  # Mock backend services
  user-service:
    image: alpine:latest
    container_name: appointment-user-service
    command: sh -c "echo 'User service mock started' && tail -f /dev/null"
    ports:
      - "8081:8081"
    networks:
      - appointment-network

  doctor-service:
    image: alpine:latest
    container_name: appointment-doctor-service
    command: sh -c "echo 'Doctor service mock started' && tail -f /dev/null"
    ports:
      - "8082:8082"
    networks:
      - appointment-network

  appointment-service:
    image: alpine:latest
    container_name: appointment-appointment-service
    command: sh -c "echo 'Appointment service mock started' && tail -f /dev/null"
    ports:
      - "8083:8083"
    networks:
      - appointment-network

  notification-service:
    image: alpine:latest
    container_name: appointment-notification-service
    command: sh -c "echo 'Notification service mock started' && tail -f /dev/null"
    ports:
      - "8084:8084"
    networks:
      - appointment-network

  admin-service:
    image: alpine:latest
    container_name: appointment-admin-service
    command: sh -c "echo 'Admin service mock started' && tail -f /dev/null"
    ports:
      - "8085:8085"
    networks:
      - appointment-network

  # MongoDB for Doctor Service
  mongo:
    image: mongo:latest
    container_name: appointment-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - appointment-network

# Define networks and volumes
networks:
  appointment-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
